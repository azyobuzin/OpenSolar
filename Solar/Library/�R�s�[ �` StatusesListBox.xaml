<ListBox x:Class="Solar.StatusesListBox"
		 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		 xmlns:local="clr-namespace:Solar"
		 xmlns:lunar="clr-namespace:Lunar;assembly=Lunar"
		 xmlns:interop="clr-namespace:Ignition.Presentation;assembly=Ignition.Presentation"
		 xmlns:models="clr-namespace:Solar.Models"
		 BorderThickness="0"
		 AlternationCount="2"
		 HorizontalContentAlignment="Stretch"
		 VerticalContentAlignment="Center"
		 ItemContainerStyleSelector="{DynamicResource StatusesListBoxStyleSelector}"
		 Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"
		 Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
		 VirtualizingStackPanel.IsVirtualizing="True"
		 VirtualizingStackPanel.VirtualizationMode="Recycling"
		 Grid.IsSharedSizeScope="True"
		 Unloaded="ListBox_Unloaded">
	<ListBox.Resources>
		<KeyBinding x:Key="CopyStatusBinding"
					CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBox}}}"
					Command="{DynamicResource CopyStatusCommand}" />
		<KeyBinding x:Key="CopyStatusUriBinding"
					CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBox}}}"
					Command="{DynamicResource CopyStatusUriCommand}" />
		<KeyBinding x:Key="CopyStatusUserBinding"
					CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBox}}}"
					Command="{DynamicResource CopyStatusUserCommand}" />
		<KeyBinding x:Key="DirectMessageBinding"
					CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBox}}}"
					Command="{DynamicResource DirectMessageCommand}" />
		<KeyBinding x:Key="DeleteStatusBinding"
					CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBox}}}"
					Command="{DynamicResource DeleteStatusCommand}" />
		<KeyBinding x:Key="ReplyToStatusBinding"
					CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBox}}}"
					Command="{DynamicResource ReplyToStatusCommand}" />
		<KeyBinding x:Key="QuoteStatusBinding"
					CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBox}}}"
					Command="{DynamicResource QuoteStatusCommand}" />
		<KeyBinding x:Key="ReplyToDetailsBinding"
					CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBox}}}"
					Command="{DynamicResource ReplyToDetailsCommand}" />
		<KeyBinding x:Key="FavoriteStatusBinding"
					CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBox}}}"
					Command="{DynamicResource FavoriteStatusCommand}" />
		<KeyBinding x:Key="RetweetStatusBinding"
					CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBox}}}"
					Command="{DynamicResource RetweetStatusCommand}" />
		<KeyBinding x:Key="NearStatusBinding"
					CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBox}}}"
					Command="{DynamicResource NearStatusCommand}" />
		<KeyBinding x:Key="StatusDetailsBinding"
					CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBox}}}"
					Command="{DynamicResource StatusDetailsCommand}" />
		<KeyBinding x:Key="UserDetailsBinding"
					CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBox}}}"
					Command="{DynamicResource UserDetailsCommand}" />
		<KeyBinding x:Key="SearchQuickBinding"
					Command="{Binding SearchQuickCommand, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" />

		<local:KeyGestureStringConverter x:Key="KeyGestureStringConverter" />
		<local:LinkConverter x:Key="LinkConverter" />
		<local:DateTimeConverter x:Key="DateTimeConverter" />
		<local:ImageUriResolver x:Key="ImageUriResolver" />
		<local:StatusesListBoxStyleSelector x:Key="StatusesListBoxStyleSelector" />
		<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
		<Style x:Key="BasicItemStyle"
			   TargetType="{x:Type ListBoxItem}"
			   BasedOn="{StaticResource {x:Type ListBoxItem}}">
			<Setter Property="Padding"
					Value="0" />
			<Setter Property="HorizontalAlignment"
					Value="Left" />
			<Setter Property="HorizontalContentAlignment"
					Value="Stretch" />
			<Setter Property="Width"
					Value="{Binding ViewportWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ScrollViewer}}}" />
			<EventSetter Event="MouseDoubleClick"
						 Handler="ListBoxItem_MouseDoubleClick" />
		</Style>
		<Style x:Key="ItemStyle"
			   TargetType="{x:Type ListBoxItem}"
			   BasedOn="{StaticResource BasicItemStyle}">
			<Style.Triggers>
				<Trigger Property="ItemsControl.AlternationIndex"
						 Value="1">
					<Setter Property="Background"
							Value="#FFEFEFEF" />
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="NewItemStyle"
			   TargetType="{x:Type ListBoxItem}"
			   BasedOn="{StaticResource BasicItemStyle}">
			<Setter Property="Background">
				<Setter.Value>
					<LinearGradientBrush StartPoint="0,0"
										 EndPoint="0,1">
						<GradientStop Color="{Binding NewStatusColor, Source={x:Static models:Settings.Default}}"
									  Offset="0" />
						<GradientStop Color="Transparent"
									  Offset="0.3" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="StatusRepliedBySelectedItemStyle"
			   TargetType="{x:Type ListBoxItem}"
			   BasedOn="{StaticResource BasicItemStyle}">
			<Setter Property="Background">
				<Setter.Value>
					<LinearGradientBrush StartPoint="0,0"
										 EndPoint="0,1">
						<GradientStop Color="{Binding HighlightStatusRepliedBySelectedColor, Source={x:Static models:Settings.Default}}"
									  Offset="0" />
						<GradientStop Color="Transparent"
									  Offset="0.3" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="StatusReplyingToSelectedItemStyle"
			   TargetType="{x:Type ListBoxItem}"
			   BasedOn="{StaticResource BasicItemStyle}">
			<Setter Property="Background">
				<Setter.Value>
					<LinearGradientBrush StartPoint="0,0"
										 EndPoint="0,1">
						<GradientStop Color="{Binding HighlightStatusReplyingToSelectedColor, Source={x:Static models:Settings.Default}}"
									  Offset="0" />
						<GradientStop Color="Transparent"
									  Offset="0.3" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="StatusHavingSelectedSenderItemStyle"
			   TargetType="{x:Type ListBoxItem}"
			   BasedOn="{StaticResource BasicItemStyle}">
			<Setter Property="Background">
				<Setter.Value>
					<LinearGradientBrush StartPoint="0,0"
										 EndPoint="0,1">
						<GradientStop Color="{Binding HighlightStatusHavingSelectedSenderColor, Source={x:Static models:Settings.Default}}"
									  Offset="0" />
						<GradientStop Color="Transparent"
									  Offset="0.3" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
		</Style>
		<DataTemplate DataType="{x:Type lunar:Status}">
			<Border BorderThickness="0,0,0,1"
					BorderBrush="Silver"
					ClipToBounds="True"
					HorizontalAlignment="Stretch">
				<Grid Name="grid"
					  Height="22">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition Width="Auto"
										  SharedSizeGroup="NameColumn" />
						<ColumnDefinition />
						<ColumnDefinition Width="Auto" />
					</Grid.ColumnDefinitions>
					<Grid.ToolTip>
						<ToolTip Placement="Bottom">
							<Grid Width="{Binding Parent.PlacementTarget.ActualWidth, RelativeSource={RelativeSource Self}}"
								  UseLayoutRounding="True"
								  SnapsToDevicePixels="True">
								<Grid.Style>
									<Style TargetType="{x:Type Grid}">
										<Style.Triggers>
											<DataTrigger Binding="{Binding Source={interop:VisualStylesEnabled RequiresVista=True}, Mode=OneTime}"
														 Value="True">
												<Setter Property="Margin"
														Value="-1,0,-11,0" />
											</DataTrigger>
											<DataTrigger Binding="{Binding Source={interop:VisualStylesEnabled RequiresXP=True}, Mode=OneTime}"
														 Value="True">
												<Setter Property="Margin"
														Value="-1,0,-5,0" />
											</DataTrigger>
											<DataTrigger Binding="{Binding Source={interop:VisualStylesEnabled Disabled=True}, Mode=OneTime}"
														 Value="True">
												<Setter Property="Margin"
														Value="-1,0,-5,0" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</Grid.Style>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition />
								</Grid.ColumnDefinitions>
								<Button MaxHeight="48"
										VerticalAlignment="Top"
										Background="Transparent"
										BorderBrush="{x:Null}">
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition />
											<ColumnDefinition Width="Auto" />
										</Grid.ColumnDefinitions>
										<Grid.RowDefinitions>
											<RowDefinition />
											<RowDefinition Height="Auto" />
										</Grid.RowDefinitions>
										<local:IconDisplay x:Name="toolTipProfileImage"
														   Source="{Binding ProfileImage, Mode=OneTime}"
														   Grid.ColumnSpan="2"
														   Grid.RowSpan="2"
														   Width="48"
														   Height="48" />
										<Image Source="../Resources/Protected.png"
											   Margin="0,0,0,2"
											   Grid.Column="1"
											   Grid.Row="1"
											   Visibility="{Binding Protected, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}">
											<Image.Style>
												<Style TargetType="{x:Type Image}">
													<Style.Triggers>
														<DataTrigger Binding="{Binding ShowProtectedIcon, Source={x:Static models:Settings.Default}}"
																	 Value="True">
															<Setter Property="Visibility"
																	Value="Hidden" />
														</DataTrigger>
													</Style.Triggers>
												</Style>
											</Image.Style>
										</Image>
										<Image Source="../Resources/Retweet.png"
											   Margin="0,0,2,2"
											   Grid.Column="1"
											   Grid.Row="1"
											   Visibility="{Binding IsRetweet, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}" />
									</Grid>
									<Button.Style>
										<Style TargetType="{x:Type Button}"
											   BasedOn="{StaticResource UserImageButton}">
											<Setter Property="Margin"
													Value="0,3,7,3" />
											<Style.Triggers>
												<DataTrigger Binding="{Binding Source={interop:VisualStylesEnabled RequiresXP=True}, Mode=OneTime}"
															 Value="True">
													<Setter Property="Margin"
															Value="4,3,7,3" />
												</DataTrigger>
												<DataTrigger Binding="{Binding Source={interop:VisualStylesEnabled Disabled=True}, Mode=OneTime}"
															 Value="True">
													<Setter Property="Margin"
															Value="4,3,7,3" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</Button.Style>
								</Button>
								<StackPanel Grid.Column="1">
									<StackPanel.Style>
										<Style TargetType="{x:Type StackPanel}">
											<Style.Triggers>
												<DataTrigger Binding="{Binding Source={interop:VisualStylesEnabled RequiresVista=True}, Mode=OneTime}"
															 Value="True">
													<Setter Property="Margin"
															Value="0,0,11,0" />
												</DataTrigger>
												<DataTrigger Binding="{Binding Source={interop:VisualStylesEnabled RequiresXP=True}, Mode=OneTime}"
															 Value="True">
													<Setter Property="Margin"
															Value="0,0,5,0" />
												</DataTrigger>
												<DataTrigger Binding="{Binding Source={interop:VisualStylesEnabled Disabled=True}, Mode=OneTime}"
															 Value="True">
													<Setter Property="Margin"
															Value="0,0,5,0" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</StackPanel.Style>
									<StackPanel Orientation="Horizontal">
										<TextBlock Text="{Binding RetweetedStatus.UserName, Mode=OneTime}"
												   FontWeight="Bold"
												   Visibility="{Binding IsRetweet, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}" />
										<TextBlock Text="{Binding UserName, Mode=OneTime, StringFormat={}(via {0})}"
												   Margin="4,0,0,0"
												   Visibility="{Binding IsRetweet, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}" />
										<TextBlock Text="{Binding UserName, Mode=OneTime}"
												   FontWeight="Bold"
												   Visibility="{Binding IsNotRetweet, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}" />
										<TextBlock Text="{Binding RecipientName, Mode=OneTime, StringFormat={}(to {0})}"
												   Margin="4,0,0,0"
												   Visibility="{Binding IsDirectMessage, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}" />
										<TextBlock Text="{Binding FullUserName}"
												   Margin="4,0,0,0"
												   Visibility="{Binding IsNotRetweetAndDirectMessage, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}" />
									</StackPanel>
									<ContentControl Name="toolTipText"
													Content="{Binding Converter={StaticResource LinkConverter}, Mode=OneTime}">
										<ContentControl.Resources>
											<Style TargetType="{x:Type TextBlock}">
												<Setter Property="TextWrapping"
														Value="Wrap" />
												<Setter Property="TextTrimming"
														Value="None" />
											</Style>
											<Style TargetType="{x:Type Hyperlink}">
												<Style.Triggers>
													<Trigger Property="IsMouseOver"
															 Value="True">
														<Setter Property="TextDecorations"
																Value="Underline" />
													</Trigger>
												</Style.Triggers>
												<Setter Property="TextDecorations"
														Value="{x:Null}" />
												<Setter Property="Foreground"
														Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}" />
											</Style>
										</ContentControl.Resources>
									</ContentControl>
									<StackPanel Margin="0,4,0,0"
												Orientation="Horizontal"
												HorizontalAlignment="Right">
										<TextBlock Visibility="{Binding IsReply, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}">
											<Hyperlink Command="{DynamicResource ReplyToDetailsCommand}"
													   CommandParameter="{Binding}">
												<Run Text="{Binding InReplyToUserName, Mode=OneWay, StringFormat={}{0} 宛}" />
											</Hyperlink>
										</TextBlock>
										<TextBlock>
											<TextBlock.Style>
												<Style TargetType="{x:Type TextBlock}">
													<Style.Triggers>
														<DataTrigger Binding="{Binding SourceName, Mode=OneTime}"
																	 Value="{x:Null}">
															<Setter Property="Visibility"
																	Value="Collapsed" />
														</DataTrigger>
													</Style.Triggers>
												</Style>
											</TextBlock.Style>
											<Run />
											<Hyperlink Command="{DynamicResource OpenUriCommand}"
													   CommandParameter="{Binding SourceUri, Mode=OneTime}">
												<Run Text="{Binding SourceName, Mode=OneTime, StringFormat={}{0} から}" />
											</Hyperlink>
										</TextBlock>
										<TextBlock>
											<Run />
											<Hyperlink Command="{DynamicResource StatusDetailsCommand}"
													   CommandParameter="{Binding}">
												<Run Text="{Binding CreatedAt, Mode=OneTime, Converter={StaticResource DateTimeConverter}}" />
											</Hyperlink>
										</TextBlock>
									</StackPanel>
									<ItemsControl ItemsSource="{Binding Converter={StaticResource ImageUriResolver}}">
										<ItemsControl.ItemsPanel>
											<ItemsPanelTemplate>
												<WrapPanel />
											</ItemsPanelTemplate>
										</ItemsControl.ItemsPanel>
										<ItemsControl.ItemTemplate>
											<DataTemplate>
												<Button Margin="3"
														Style="{StaticResource UserImageButton}"
														Command="{DynamicResource OpenUriCommand}"
														CommandParameter="{Binding Original, Mode=OneTime}">
													<local:IconDisplay Source="{Binding Thumbnail, Mode=OneWay}"
																	   Width="75"
																	   Height="75" />
												</Button>
											</DataTemplate>
										</ItemsControl.ItemTemplate>
									</ItemsControl>
								</StackPanel>
							</Grid>
						</ToolTip>
					</Grid.ToolTip>
					<Button Margin="3"
							MaxHeight="48"
							Style="{StaticResource UserImageButton}"
							VerticalAlignment="Top"
							Command="{DynamicResource UserDetailsCommand}"
							CommandParameter="{Binding RetweetedStatusOrSelf}">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>
							<local:IconDisplay x:Name="profileImage"
											   Source="{Binding ProfileImage, Mode=OneTime}"
											   Grid.ColumnSpan="2"
											   Grid.RowSpan="2"
											   Width="48" />
							<Image Source="../Resources/Protected.png"
								   Margin="0,0,0,2"
								   Grid.Column="1"
								   Grid.Row="1"
								   Visibility="{Binding Protected, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}">
								<Image.Style>
									<Style TargetType="{x:Type Image}">
										<Style.Triggers>
											<DataTrigger Binding="{Binding ShowProtectedIcon, Source={x:Static models:Settings.Default}}"
														 Value="True">
												<Setter Property="Visibility"
														Value="Hidden" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</Image.Style>
							</Image>
							<Image Source="../Resources/Retweet.png"
								   Margin="0,0,2,2"
								   Grid.Column="1"
								   Grid.Row="1"
								   Visibility="{Binding IsRetweet, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}" />
						</Grid>
					</Button>
					<StackPanel Name="verticalNamePanel"
								Margin="4,2,8,-4"
								Grid.Column="1">
						<TextBlock Text="{Binding RetweetedStatus.UserName, Mode=OneTime}"
								   Margin="0,0,0,2"
								   FontWeight="Bold"
								   Visibility="{Binding IsRetweet, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}" />
						<TextBlock Name="name"
								   Text="{Binding UserName, Mode=OneTime}"
								   FontWeight="Bold" />
						<TextBlock Name="fullName"
								   Text="{Binding FullUserName}"
								   Width="{Binding ActualWidth, ElementName=name}"
								   TextWrapping="Wrap"
								   Visibility="Collapsed" />
					</StackPanel>
					<StackPanel Name="contentStackPanel"
								Grid.Column="2"
								VerticalAlignment="Top"
								Margin="0,2,0,3">
						<StackPanel Name="horizontalNamePanel"
									Margin="4,0,0,-2"
									Orientation="Horizontal"
									Visibility="Collapsed">
							<TextBlock Text="{Binding RetweetedStatus.UserName, Mode=OneTime}"
									   FontWeight="Bold"
									   Visibility="{Binding IsRetweet, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}" />
							<TextBlock Text="{Binding UserName, Mode=OneTime, StringFormat={}(via {0})}"
									   Margin="4,0,0,0"
									   Visibility="{Binding IsRetweet, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}" />
							<TextBlock Text="{Binding UserName, Mode=OneTime}"
									   FontWeight="Bold"
									   Visibility="{Binding IsNotRetweet, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}" />
							<TextBlock Text="{Binding RecipientName, Mode=OneTime, StringFormat={}(to {0})}"
									   Margin="4,0,0,0"
									   Visibility="{Binding IsDirectMessage, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}" />
							<TextBlock Text="{Binding FullUserName}"
									   Margin="4,0,0,0"
									   Visibility="{Binding IsNotRetweetAndDirectMessage, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}" />
						</StackPanel>
						<ContentControl Name="text"
										Content="{Binding Converter={StaticResource LinkConverter}, Mode=OneTime}">
							<ContentControl.Resources>
								<Style TargetType="{x:Type TextBlock}">
									<Style.Triggers>
										<MultiDataTrigger>
											<MultiDataTrigger.Conditions>
												<Condition Binding="{Binding Timeline.TimelineStyle, Source={x:Static models:Settings.Default}}"
														   Value="Semi" />
												<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}, Mode=FindAncestor}}"
														   Value="True" />
											</MultiDataTrigger.Conditions>
											<Setter Property="TextWrapping"
													Value="Wrap" />
											<Setter Property="TextTrimming"
													Value="None" />
										</MultiDataTrigger>
										<DataTrigger Binding="{Binding Timeline.TimelineStyle, Source={x:Static models:Settings.Default}}"
													 Value="Full">
											<Setter Property="TextWrapping"
													Value="Wrap" />
											<Setter Property="TextTrimming"
													Value="None" />
										</DataTrigger>
									</Style.Triggers>
									<Setter Property="TextTrimming"
											Value="CharacterEllipsis" />
								</Style>
								<Style TargetType="{x:Type Hyperlink}">
									<Style.Triggers>
										<Trigger Property="IsMouseOver"
												 Value="True">
											<Setter Property="TextDecorations"
													Value="Underline" />
										</Trigger>
										<DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}}"
													 Value="True">
											<Setter Property="Foreground"
													Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}}" />
										</DataTrigger>
									</Style.Triggers>
									<Setter Property="TextDecorations"
											Value="{x:Null}" />
									<Setter Property="Foreground"
											Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}" />
								</Style>
							</ContentControl.Resources>
						</ContentControl>
						<ItemsControl Name="images"
									  ItemsSource="{Binding Converter={StaticResource ImageUriResolver}}"
									  Visibility="Collapsed">
							<ItemsControl.ItemsPanel>
								<ItemsPanelTemplate>
									<WrapPanel />
								</ItemsPanelTemplate>
							</ItemsControl.ItemsPanel>
							<ItemsControl.ItemTemplate>
								<DataTemplate>
									<Button Margin="3"
											Style="{StaticResource UserImageButton}"
											Command="{DynamicResource OpenUriCommand}"
											CommandParameter="{Binding Original, Mode=OneTime}">
										<local:IconDisplay Source="{Binding Thumbnail, Mode=OneWay}"
														   Width="75"
														   Height="75" />
									</Button>
								</DataTemplate>
							</ItemsControl.ItemTemplate>
						</ItemsControl>
					</StackPanel>
					<Grid Grid.Column="3"
						  Margin="4,2,4,3">
						<Grid.RowDefinitions>
							<RowDefinition />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>
						<StackPanel>
							<TextBlock HorizontalAlignment="Right">
								<Hyperlink Command="{DynamicResource StatusDetailsCommand}"
										   CommandParameter="{Binding}">
									<Run Text="{Binding CreatedAt, Mode=OneTime, Converter={StaticResource DateTimeConverter}}" />
								</Hyperlink>
							</TextBlock>
							<StackPanel Name="commandPanel"
										Margin="0,0,0,-1"
										HorizontalAlignment="Right"
										Orientation="Horizontal">
								<Button Command="{DynamicResource FavoriteStatusCommand}"
										ToolTip="お気に入り">
									<Button.Style>
										<Style TargetType="{x:Type Button}"
											   BasedOn="{StaticResource StatusCommandButton}">
											<Setter Property="CommandParameter"
													Value="{Binding}" />
											<Style.Triggers>
												<DataTrigger Binding="{Binding IsDirectMessage, Mode=OneTime}"
															 Value="True">
													<Setter Property="Visibility"
															Value="Collapsed" />
												</DataTrigger>
												<DataTrigger Binding="{Binding IsRetweet, Mode=OneTime}"
															 Value="True">
													<Setter Property="CommandParameter"
															Value="{Binding RetweetedStatus}" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</Button.Style>
									<Button.Content>
										<Image Name="favorite"
											   Source="../Resources/Favorite.png"
											   Width="16"
											   Height="16" />
									</Button.Content>
								</Button>
								<Button Command="{DynamicResource ReplyToStatusCommand}"
										ToolTip="返信する">
									<Button.Style>
										<Style TargetType="{x:Type Button}"
											   BasedOn="{StaticResource StatusCommandButton}">
											<Setter Property="CommandParameter"
													Value="{Binding}" />
											<Style.Triggers>
												<DataTrigger Binding="{Binding IsDirectMessage, Mode=OneTime}"
															 Value="True">
													<Setter Property="Visibility"
															Value="Collapsed" />
												</DataTrigger>
												<DataTrigger Binding="{Binding IsRetweet, Mode=OneTime}"
															 Value="True">
													<Setter Property="CommandParameter"
															Value="{Binding RetweetedStatus}" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</Button.Style>
									<Button.Content>
										<Image Source="../Resources/Reply.png"
											   Width="16"
											   Height="16" />
									</Button.Content>
								</Button>
								<Button Command="{DynamicResource DirectMessageCommand}"
										ToolTip="ダイレクトメッセージを送る">
									<Button.Style>
										<Style TargetType="{x:Type Button}"
											   BasedOn="{StaticResource StatusCommandButton}">
											<Setter Property="CommandParameter"
													Value="{Binding}" />
											<Style.Triggers>
												<DataTrigger Binding="{Binding IsDirectMessage, Mode=OneTime}"
															 Value="False">
													<Setter Property="Visibility"
															Value="Collapsed" />
												</DataTrigger>
												<DataTrigger Binding="{Binding IsRetweet, Mode=OneTime}"
															 Value="True">
													<Setter Property="CommandParameter"
															Value="{Binding RetweetedStatus}" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</Button.Style>
									<Button.Content>
										<Image Source="../Resources/Message.png"
											   Width="16"
											   Height="16" />
									</Button.Content>
								</Button>
							</StackPanel>
						</StackPanel>
						<TextBlock Name="inReplyTo"
								   Grid.Row="1"
								   HorizontalAlignment="Right"
								   Visibility="{Binding IsReply, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}">
							<Hyperlink Command="{DynamicResource ReplyToDetailsCommand}"
									   CommandParameter="{Binding}">
								<Run Text="{Binding InReplyToUserName, Mode=OneWay, StringFormat={}{0} 宛}" />
							</Hyperlink>
						</TextBlock>
					</Grid>
				</Grid>
			</Border>
			<DataTemplate.Triggers>
				<DataTrigger Binding="{Binding IsDirectMessage, Mode=OneTime}"
							 Value="True">
					<Setter TargetName="grid"
							Property="ContextMenu">
						<Setter.Value>
							<Binding Mode="OneTime">
								<Binding.Converter>
									<local:LinkContextMenuConverter>
										<MenuItem Header="コピー(_C)"
												  InputGestureText="{Binding Gesture, Source={StaticResource CopyStatusBinding}, Converter={StaticResource KeyGestureStringConverter}}"
												  Command="{DynamicResource CopyStatusCommand}"
												  CommandParameter="{Binding}" />
										<MenuItem Header="その他のコピー(_P)">
											<MenuItem Header="_URL"
													  InputGestureText="{Binding Gesture, Source={StaticResource CopyStatusUriBinding}, Converter={StaticResource KeyGestureStringConverter}}"
													  Command="{DynamicResource CopyStatusUriCommand}"
													  CommandParameter="{Binding}" />
											<MenuItem Header="ユーザ _ID"
													  InputGestureText="{Binding Gesture, Source={StaticResource CopyStatusUserBinding}, Converter={StaticResource KeyGestureStringConverter}}"
													  Command="{DynamicResource CopyStatusUserCommand}"
													  CommandParameter="{Binding}" />
										</MenuItem>
										<Separator />
										<MenuItem Header="ダイレクトメッセージを送る(_D)"
												  InputGestureText="{Binding Gesture, Source={StaticResource DirectMessageBinding}, Converter={StaticResource KeyGestureStringConverter}}"
												  Command="{DynamicResource DirectMessageCommand}"
												  CommandParameter="{Binding}" />
										<MenuItem Header="削除(_D)"
												  InputGestureText="{Binding Gesture, Source={StaticResource DeleteStatusBinding}, Converter={StaticResource KeyGestureStringConverter}}"
												  Command="{DynamicResource DeleteStatusCommand}"
												  CommandParameter="{Binding}"
												  Visibility="{Binding IsOwned, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}" />
										<Separator />
										<MenuItem Command="{DynamicResource UserDetailsCommand}"
												  CommandParameter="{Binding}">
											<MenuItem.Header>
												<TextBlock Text="{Binding UserName, Mode=OneTime, StringFormat={}{0} のユーザ情報}" />
											</MenuItem.Header>
										</MenuItem>
									</local:LinkContextMenuConverter>
								</Binding.Converter>
							</Binding>
						</Setter.Value>
					</Setter>
				</DataTrigger>
				<DataTrigger Binding="{Binding IsDirectMessage, Mode=OneTime}"
							 Value="False">
					<Setter TargetName="grid"
							Property="ContextMenu">
						<Setter.Value>
							<Binding Mode="OneTime">
								<Binding.Converter>
									<local:LinkContextMenuConverter>
										<MenuItem Header="返信履歴(_R)"
												  InputGestureText="{Binding Gesture, Source={StaticResource ReplyToDetailsBinding}, Converter={StaticResource KeyGestureStringConverter}}"
												  Command="{DynamicResource ReplyToDetailsCommand}"
												  CommandParameter="{Binding RetweetedStatusOrSelf}"
												  Visibility="{Binding IsReply, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}" />
										<Separator Visibility="{Binding IsReply, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}" />
										<MenuItem Header="コピー(_C)"
												  InputGestureText="{Binding Gesture, Source={StaticResource CopyStatusBinding}, Converter={StaticResource KeyGestureStringConverter}}"
												  Command="{DynamicResource CopyStatusCommand}"
												  CommandParameter="{Binding}" />
										<MenuItem Header="その他のコピー(_P)">
											<MenuItem Header="_URL"
													  InputGestureText="{Binding Gesture, Source={StaticResource CopyStatusUriBinding}, Converter={StaticResource KeyGestureStringConverter}}"
													  Command="{DynamicResource CopyStatusUriCommand}"
													  CommandParameter="{Binding}" />
											<MenuItem Header="ユーザ _ID"
													  InputGestureText="{Binding Gesture, Source={StaticResource CopyStatusUserBinding}, Converter={StaticResource KeyGestureStringConverter}}"
													  Command="{DynamicResource CopyStatusUserCommand}"
													  CommandParameter="{Binding}" />
										</MenuItem>
										<Separator />
										<MenuItem Header="返信する(_E)"
												  InputGestureText="{Binding Gesture, Source={StaticResource ReplyToStatusBinding}, Converter={StaticResource KeyGestureStringConverter}}"
												  Command="{DynamicResource ReplyToStatusCommand}"
												  CommandParameter="{Binding RetweetedStatusOrSelf}" />
										<MenuItem Header="ダイレクトメッセージを送る(_D)"
												  InputGestureText="{Binding Gesture, Source={StaticResource DirectMessageBinding}, Converter={StaticResource KeyGestureStringConverter}}"
												  Command="{DynamicResource DirectMessageCommand}"
												  CommandParameter="{Binding RetweetedStatusOrSelf}" />
										<MenuItem Header="_Retweet"
												  InputGestureText="{Binding Gesture, Source={StaticResource RetweetStatusBinding}, Converter={StaticResource KeyGestureStringConverter}}"
												  Command="{DynamicResource RetweetStatusCommand}"
												  IsEnabled="{Binding RetweetedStatusOrSelf.User.IsNotProtected, Mode=OneTime}"
												  Visibility="{Binding IsNotOwned, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}"
												  CommandParameter="{Binding RetweetedStatusOrSelf}" />
										<MenuItem Header="引用(_Q)"
												  InputGestureText="{Binding Gesture, Source={StaticResource QuoteStatusBinding}, Converter={StaticResource KeyGestureStringConverter}}"
												  Command="{DynamicResource QuoteStatusCommand}"
												  CommandParameter="{Binding RetweetedStatusOrSelf}"
												  Visibility="{Binding IsNotOwned, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}" />
										<MenuItem Header="お気に入り(_F)"
												  InputGestureText="{Binding Gesture, Source={StaticResource FavoriteStatusBinding}, Converter={StaticResource KeyGestureStringConverter}}"
												  Command="{DynamicResource FavoriteStatusCommand}"
												  IsChecked="{Binding Favorited, Mode=OneWay}"
												  CommandParameter="{Binding RetweetedStatusOrSelf}" />
										<MenuItem Header="削除(_D)"
												  InputGestureText="{Binding Gesture, Source={StaticResource DeleteStatusBinding}, Converter={StaticResource KeyGestureStringConverter}}"
												  Command="{DynamicResource DeleteStatusCommand}"
												  CommandParameter="{Binding}"
												  Visibility="{Binding IsOwned, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}" />
										<Separator />
										<MenuItem Header="前後 5 件のつぶやきを見る"
												  InputGestureText="{Binding Gesture, Source={StaticResource NearStatusBinding}, Converter={StaticResource KeyGestureStringConverter}}"
												  Command="{DynamicResource NearStatusesCommand}"
												  CommandParameter="{Binding RetweetedStatusOrSelf}" />
										<MenuItem Header="つぶやきの _URL を開く"
												  InputGestureText="{Binding Gesture, Source={StaticResource StatusDetailsBinding}, Converter={StaticResource KeyGestureStringConverter}}"
												  Command="{DynamicResource StatusDetailsCommand}"
												  CommandParameter="{Binding RetweetedStatusOrSelf}" />
										<MenuItem Command="{DynamicResource UserDetailsCommand}"
												  InputGestureText="{Binding Gesture, Source={StaticResource UserDetailsBinding}, Converter={StaticResource KeyGestureStringConverter}}"
												  CommandParameter="{Binding}">
											<MenuItem.Header>
												<TextBlock Text="{Binding UserName, Mode=OneTime, StringFormat={}{0} のユーザ情報}" />
											</MenuItem.Header>
										</MenuItem>
										<Separator />
										<MenuItem Command="{DynamicResource OpenUriCommand}"
												  CommandParameter="{Binding SourceUri, Mode=OneTime}">
											<MenuItem.Header>
												<TextBlock Text="{Binding SourceName, Mode=OneTime}" />
											</MenuItem.Header>
										</MenuItem>
									</local:LinkContextMenuConverter>
								</Binding.Converter>
							</Binding>
						</Setter.Value>
					</Setter>
				</DataTrigger>
				<DataTrigger Binding="{Binding IsRetweet, Mode=OneTime}"
							 Value="True">
					<Setter TargetName="text"
							Property="Content"
							Value="{Binding RetweetedStatus, Mode=OneTime, Converter={StaticResource LinkConverter}}" />
					<Setter TargetName="toolTipText"
							Property="Content"
							Value="{Binding RetweetedStatus, Mode=OneTime, Converter={StaticResource LinkConverter}}" />
					<Setter TargetName="profileImage"
							Property="Source"
							Value="{Binding RetweetedStatus.ProfileImage, Mode=OneTime}" />
					<Setter TargetName="toolTipProfileImage"
							Property="Source"
							Value="{Binding RetweetedStatus.ProfileImage, Mode=OneTime}" />
				</DataTrigger>
				<MultiDataTrigger>
					<MultiDataTrigger.Conditions>
						<Condition Binding="{Binding Timeline.TimelineStyle, Source={x:Static models:Settings.Default}}"
								   Value="Semi" />
						<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}, Mode=FindAncestor}}"
								   Value="True" />
					</MultiDataTrigger.Conditions>
					<Setter TargetName="verticalNamePanel"
							Property="Visibility"
							Value="Collapsed" />
					<Setter TargetName="horizontalNamePanel"
							Property="Visibility"
							Value="Visible" />
					<Setter TargetName="grid"
							Property="Height"
							Value="Auto" />
					<Setter TargetName="grid"
							Property="ToolTip"
							Value="{x:Null}" />
					<Setter TargetName="text"
							Property="Margin"
							Value="4,3,0,0" />
					<Setter TargetName="profileImage"
							Property="Height"
							Value="48" />
					<Setter TargetName="contentStackPanel"
							Property="Grid.Column"
							Value="1" />
					<Setter TargetName="contentStackPanel"
							Property="Grid.ColumnSpan"
							Value="2" />
				</MultiDataTrigger>
				<MultiDataTrigger>
					<MultiDataTrigger.Conditions>
						<Condition Binding="{Binding Timeline.TimelineStyle, Source={x:Static models:Settings.Default}}"
								   Value="Semi" />
						<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}, Mode=FindAncestor}}"
								   Value="False" />
					</MultiDataTrigger.Conditions>
					<Setter TargetName="commandPanel"
							Property="Visibility"
							Value="Collapsed" />
					<Setter TargetName="inReplyTo"
							Property="Visibility"
							Value="Collapsed" />
					<Setter TargetName="text"
							Property="Margin"
							Value="0,0,0,1" />
					<Setter TargetName="profileImage"
							Property="Height"
							Value="16" />
				</MultiDataTrigger>
				<MultiDataTrigger>
					<MultiDataTrigger.Conditions>
						<Condition Binding="{Binding Timeline.TimelineStyle, Source={x:Static models:Settings.Default}}"
								   Value="Full" />
						<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}, Mode=FindAncestor}}"
								   Value="True" />
					</MultiDataTrigger.Conditions>
					<Setter TargetName="images"
							Property="Visibility"
							Value="Visible" />
				</MultiDataTrigger>
				<DataTrigger Binding="{Binding Timeline.TimelineStyle, Source={x:Static models:Settings.Default}}"
							 Value="Full">
					<Setter TargetName="verticalNamePanel"
							Property="Visibility"
							Value="Collapsed" />
					<Setter TargetName="horizontalNamePanel"
							Property="Visibility"
							Value="Visible" />
					<Setter TargetName="grid"
							Property="Height"
							Value="Auto" />
					<Setter TargetName="grid"
							Property="ToolTip"
							Value="{x:Null}" />
					<Setter TargetName="text"
							Property="Margin"
							Value="4,3,0,0" />
					<Setter TargetName="profileImage"
							Property="Height"
							Value="48" />
				</DataTrigger>
				<DataTrigger Binding="{Binding Timeline.TimelineStyle, Source={x:Static models:Settings.Default}}"
							 Value="Single">
					<Setter TargetName="commandPanel"
							Property="Visibility"
							Value="Collapsed" />
					<Setter TargetName="inReplyTo"
							Property="Visibility"
							Value="Collapsed" />
					<Setter TargetName="text"
							Property="Margin"
							Value="0,0,0,1" />
					<Setter TargetName="profileImage"
							Property="Height"
							Value="16" />
				</DataTrigger>
				<DataTrigger Binding="{Binding ShowStatusShadow, Source={x:Static models:Settings.Default}}"
							 Value="True">
					<Setter TargetName="grid"
							Property="Background">
						<Setter.Value>
							<LinearGradientBrush StartPoint="0,0"
												 EndPoint="0,1">
								<GradientStop Color="Transparent"
											  Offset="0.8" />
								<GradientStop Color="#1F000000"
											  Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</DataTrigger>
				<DataTrigger Binding="{Binding RetweetedStatusOrSelf.Favorited, Mode=OneWay}"
							 Value="True">
					<Setter TargetName="favorite"
							Property="Source"
							Value="../Resources/Favorited.png" />
				</DataTrigger>
				<Trigger SourceName="grid"
						 Property="IsMouseOver"
						 Value="False">
					<Setter TargetName="commandPanel"
							Property="Visibility"
							Value="Collapsed" />
				</Trigger>
			</DataTemplate.Triggers>
		</DataTemplate>
		<DataTemplate DataType="{x:Type lunar:List}">
			<Border BorderThickness="0,0,0,1"
					BorderBrush="Silver"
					ClipToBounds="True">
				<Grid>
					<Grid.ContextMenu>
						<ContextMenu>
							<MenuItem Header="リストを開く(_O)"
									  Command="{DynamicResource OpenListCommand}"
									  CommandParameter="{Binding}" />
						</ContextMenu>
					</Grid.ContextMenu>
					<Grid.Background>
						<LinearGradientBrush StartPoint="0,0"
											 EndPoint="0,1">
							<GradientStop Color="Transparent"
										  Offset="0.8" />
							<GradientStop Color="#1F000000"
										  Offset="1" />
						</LinearGradientBrush>
					</Grid.Background>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition />
						<ColumnDefinition Width="Auto" />
					</Grid.ColumnDefinitions>
					<Button Margin="3"
							MaxHeight="48"
							Style="{StaticResource UserImageButton}"
							VerticalAlignment="Top"
							Background="Transparent"
							BorderBrush="{x:Null}"
							Command="{DynamicResource UserDetailsCommand}"
							CommandParameter="{Binding}">
						<local:IconDisplay Source="{Binding User.ProfileImage, Mode=OneTime}"
										   VerticalAlignment="Center"
										   Width="48"
										   Height="48" />
					</Button>
					<StackPanel Grid.Column="1"
								VerticalAlignment="Top"
								Margin="0,2,0,3">
						<StackPanel Margin="4,0,0,-2"
									Orientation="Horizontal">
							<TextBlock>
								<Run Text="@" /><Run Text="{Binding User.Name, Mode=OneTime}" /><Run Text="/" />
							</TextBlock>
							<TextBlock Text="{Binding Name, Mode=OneTime}"
									   FontWeight="Bold" />
						</StackPanel>
						<TextBlock Margin="4,3,0,0"
								   Text="{Binding Description, Mode=OneTime}"
								   TextWrapping="Wrap" />
					</StackPanel>
					<StackPanel Grid.Column="2"
								Margin="4,2,4,3">
						<TextBlock HorizontalAlignment="Right">
							<Run Text="メンバー: " /><Run Text="{Binding MemberCount, Mode=OneTime}" />
						</TextBlock>
						<TextBlock HorizontalAlignment="Right">
							<Run Text="フォロー: " /><Run Text="{Binding SubscriberCount, Mode=OneTime}" />
						</TextBlock>
					</StackPanel>
				</Grid>
			</Border>
		</DataTemplate>
	</ListBox.Resources>
	<ListBox.InputBindings>
		<StaticResource ResourceKey="CopyStatusBinding" />
		<StaticResource ResourceKey="CopyStatusUriBinding" />
		<StaticResource ResourceKey="CopyStatusUserBinding" />
		<StaticResource ResourceKey="DirectMessageBinding" />
		<StaticResource ResourceKey="DeleteStatusBinding" />
		<StaticResource ResourceKey="ReplyToStatusBinding" />
		<StaticResource ResourceKey="QuoteStatusBinding" />
		<StaticResource ResourceKey="ReplyToDetailsBinding" />
		<StaticResource ResourceKey="FavoriteStatusBinding" />
		<StaticResource ResourceKey="RetweetStatusBinding" />
		<StaticResource ResourceKey="NearStatusBinding" />
		<StaticResource ResourceKey="StatusDetailsBinding" />
		<StaticResource ResourceKey="UserDetailsBinding" />
		<StaticResource ResourceKey="SearchQuickBinding" />
	</ListBox.InputBindings>
	<ListBox.Template>
		<ControlTemplate TargetType="{x:Type ListBox}">
			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition />
				</Grid.RowDefinitions>
				<TextBox BorderThickness="0,0,0,1"
						 TextChanged="TextBox_TextChanged"
						 PreviewKeyDown="TextBox_PreviewKeyDown"
						 AcceptsReturn="True"
						 Visibility="{Binding SearchAvailable, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"
						 Loaded="TextBox_Loaded">
					<TextBox.Style>
						<Style TargetType="{x:Type TextBox}"
							   BasedOn="{StaticResource {x:Type TextBox}}">
							<Style.Resources>
								<local:StringIsNullOrEmptyConverter x:Key="StringIsNullOrEmptyConverter" />
							</Style.Resources>
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
							<Setter Property="Background">
								<Setter.Value>
									<LinearGradientBrush StartPoint="0,0"
														 EndPoint="0,1">
										<GradientStop Color="{DynamicResource {x:Static SystemColors.ControlColorKey}}"
													  Offset="0" />
										<GradientStop Color="{DynamicResource {x:Static SystemColors.WindowColorKey}}"
													  Offset="0.1" />
									</LinearGradientBrush>
								</Setter.Value>
							</Setter>
							<Setter Property="BorderBrush"
									Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
							<Setter Property="BorderThickness"
									Value="0,1,0,0" />
							<Setter Property="Padding"
									Value="1" />
							<Setter Property="FocusVisualStyle"
									Value="{x:Null}" />
							<Setter Property="ScrollViewer.PanningMode"
									Value="VerticalFirst" />
							<Setter Property="Stylus.IsFlicksEnabled"
									Value="False" />
							<Setter Property="Template">
								<Setter.Value>
									<ControlTemplate TargetType="{x:Type TextBox}">
										<Border BorderBrush="{TemplateBinding BorderBrush}"
												BorderThickness="{TemplateBinding BorderThickness}"
												Background="{TemplateBinding Background}">
											<Grid>
												<ScrollViewer Name="PART_ContentHost"
															  Margin="0,2,0,2"
															  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
												<TextBlock Name="placeholder"
														   Cursor="IBeam"
														   Opacity="0.75"
														   Visibility="Collapsed"
														   HorizontalAlignment="Left"
														   VerticalAlignment="Center"
														   Text="検索"
														   Margin="3,1,0,1"
														   Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
											</Grid>
										</Border>
										<ControlTemplate.Triggers>
											<DataTrigger Binding="{Binding Text, RelativeSource={RelativeSource Self}, Converter={StaticResource StringIsNullOrEmptyConverter}}"
														 Value="True">
												<Setter TargetName="placeholder"
														Property="Visibility"
														Value="Visible" />
											</DataTrigger>
										</ControlTemplate.Triggers>
									</ControlTemplate>
								</Setter.Value>
							</Setter>
						</Style>
					</TextBox.Style>
				</TextBox>
				<ListBox Background="{TemplateBinding Background}"
						 BorderBrush="{TemplateBinding BorderBrush}"
						 BorderThickness="{TemplateBinding BorderThickness}"
						 AlternationCount="{TemplateBinding AlternationCount}"
						 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
						 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
						 ItemContainerStyleSelector="{TemplateBinding ItemContainerStyleSelector}"
						 ItemTemplate="{TemplateBinding ItemTemplate}"
						 ItemTemplateSelector="{TemplateBinding ItemTemplateSelector}"
						 Foreground="{TemplateBinding Foreground}"
						 ScrollViewer.IsDeferredScrollingEnabled="{Binding Interface.UseDeferredScrolling, Source={x:Static models:Settings.Default}}"
						 ScrollViewer.HorizontalScrollBarVisibility="Disabled"
						 ScrollViewer.ScrollChanged="ListBox_ScrollChanged"
						 IsSynchronizedWithCurrentItem="True"
						 ItemsSource="{Binding Items, RelativeSource={RelativeSource TemplatedParent}}"
						 SelectedIndex="{Binding SelectedIndex, RelativeSource={RelativeSource TemplatedParent}}"
						 SelectedItem="{Binding SelectedItem, RelativeSource={RelativeSource TemplatedParent}}"
						 Grid.Row="1"
						 SelectionChanged="ListBox_SelectionChanged"
						 Loaded="ListBox_Loaded" />
			</Grid>
			<ControlTemplate.Triggers>
				<Trigger Property="IsGrouping"
						 Value="True">
					<Setter Property="ScrollViewer.CanContentScroll"
							Value="False" />
				</Trigger>
			</ControlTemplate.Triggers>
		</ControlTemplate>
	</ListBox.Template>
</ListBox>
